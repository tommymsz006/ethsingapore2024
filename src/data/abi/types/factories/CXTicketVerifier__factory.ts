/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CXTicketVerifier,
  CXTicketVerifierInterface,
} from "../CXTicketVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorldID",
        name: "_worldId",
        type: "address",
      },
      {
        internalType: "string",
        name: "_appId",
        type: "string",
      },
      {
        internalType: "string",
        name: "_action",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidNullifier",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTicketProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "_pA",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_pB",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_pC",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[4]",
        name: "_pubSignals",
        type: "uint256[4]",
      },
    ],
    name: "ticketVerifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "pA",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "pB",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "pC",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[4]",
        name: "pubSignals",
        type: "uint256[4]",
      },
      {
        internalType: "address",
        name: "signal",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nullifierHash",
        type: "uint256",
      },
      {
        internalType: "uint256[8]",
        name: "proof",
        type: "uint256[8]",
      },
    ],
    name: "verifyProofAndExecute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e0604052600160c052348015610014575f5ffd5b50604051610b79380380610b798339810160408190526100339161015d565b6001600160a01b0383166080526040516100809061006e906100599085906020016101f6565b60408051601f1981840301815291905261008c565b82604051602001610059929190610208565b60a05250610221915050565b5f6008826040516020016100a091906101f6565b60408051601f198184030181529190528051602090910120901c92915050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126100e3575f5ffd5b81516001600160401b038111156100fc576100fc6100c0565b604051601f8201601f19908116603f011681016001600160401b038111828210171561012a5761012a6100c0565b604052818152838201602001851015610141575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f5f6060848603121561016f575f5ffd5b83516001600160a01b0381168114610185575f5ffd5b60208501519093506001600160401b038111156101a0575f5ffd5b6101ac868287016100d4565b604086015190935090506001600160401b038111156101c9575f5ffd5b6101d5868287016100d4565b9150509250925092565b5f81518060208401855e5f93019283525090919050565b5f61020182846101df565b9392505050565b8281525f61021960208301846101df565b949350505050565b60805160a05160c05161092e61024b5f395f61063f01525f6106a101525f61060f015261092e5ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063361f464814610038578063a7ab85661461005f575b5f5ffd5b61004b6100463660046107b2565b610074565b604051901515815260200160405180910390f35b61007261006d366004610809565b6105de565b005b5f61057c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181106100a9575f5f5260205ff35b50565b5f60405183815284602082015285604082015260408160608360076107d05a03fa9150816100dc575f5f5260205ff35b825160408201526020830151606082015260408360808360066107d05a03fa9150508061010b575f5f5260205ff35b5050505050565b7f18f2dbd838b66735a3ba3a394d907c89e3afe5e82efd0d370824aa548d4cd0fb85527f1c8f670b79c5ed2f67096d79393b265443828a0918b5ca20a5a33f6b3d2c5f4660208601525f60808601866101ae87357f1a22b4c94e30edbe8a85073fda11ea5451c30ecad693f199cb0083b047711c0a7f27826e8e3132364c409fcea766512c328c3a9d3c5402605bdd12bccfff15a209846100ac565b6101fe60208801357f027c68faaca68bd1a134b505c997846adaff7041d375cba26ea3ecef641fe3fe7f042c77c2f5ddfb0d4d10894838d3bad589d1d852573ec692dfa4106fcb6e282d846100ac565b61024e60408801357f09f9c298531109bd0b9b71cd522d68c67507dbf4b0aaa1bcff3c5892530fc8687f24d4a00f4ab9c65423468c4b55b5329c9eac19369d0c98c5dfe21667f9c0431c846100ac565b61029e60608801357f278dbb6a62b272270040f5e1c31f85e3d48041ac0e17e3c61f76341878df137b7f1e60e2dd3c531d856faf0642bd5c674d589c95dc66cfcfc9ab6ea1b966487ab7846100ac565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec86101608201525f87015161018082015260205f018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f1bac3396a1e889f32d4fe8313a2183c6950e77d7400492c909cccd26fbe08f2c6102808201527f153ee38f6ffc6336c5adb84cd757abcac8d39cb6aa944a247e22bdf0c64caa776102a08201527f1ec9e10f9321894baf0e2ef80b067275600b94bf824f9afec71f24414d3cee806102c08201527f08049f185e63882a06197a90ea6becc10edcc42da9096bd607a16a0a1dd4efb76102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526105935f84013561007a565b6105a0602084013561007a565b6105ad604084013561007a565b6105ba606084013561007a565b6105c7608084013561007a565b6105d4818486888a610112565b9050805f5260205ff35b5f8281526020819052604090205460ff161561060d57604051632ec8265960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061069e8860405160200161068a919060609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052610758565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b81526004016106e2969594939291906108ab565b5f6040518083038186803b1580156106f8575f5ffd5b505afa15801561070a573d5f5f3e3d5ffd5b5050505061071a88888888610074565b6107375760405163dcfa01c560e01b815260040160405180910390fd5b505f908152602081905260409020805460ff19166001179055505050505050565b5f60088260405160200161076c91906108e2565b60408051601f198184030181529190528051602090910120901c92915050565b806040810183101561079c575f5ffd5b92915050565b806080810183101561079c575f5ffd5b5f5f5f5f61018085870312156107c6575f5ffd5b6107d0868661078c565b93506107df86604087016107a2565b92506107ee8660c0870161078c565b91506107fe8661010087016107a2565b905092959194509250565b5f5f5f5f5f5f5f5f6102e0898b031215610821575f5ffd5b61082b8a8a61078c565b975061083a8a60408b016107a2565b96506108498a60c08b0161078c565b95506108598a6101008b016107a2565b94506101808901356001600160a01b0381168114610875575f5ffd5b93506101a089013592506101c089013591506102e089018a1015610897575f5ffd5b6101e0890190509295985092959890939650565b5f6101a0820190508782528660208301528560408301528460608301528360808301526101008360a0840137979650505050505050565b5f82518060208501845e5f92019182525091905056fea26469706673582212204c565775e035de7e19853adcafb528a9b22deb08b0eb5a23235223c4ec33c08e64736f6c634300081b0033";

type CXTicketVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CXTicketVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CXTicketVerifier__factory extends ContractFactory {
  constructor(...args: CXTicketVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _worldId: PromiseOrValue<string>,
    _appId: PromiseOrValue<string>,
    _action: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CXTicketVerifier> {
    return super.deploy(
      _worldId,
      _appId,
      _action,
      overrides || {}
    ) as Promise<CXTicketVerifier>;
  }
  override getDeployTransaction(
    _worldId: PromiseOrValue<string>,
    _appId: PromiseOrValue<string>,
    _action: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _worldId,
      _appId,
      _action,
      overrides || {}
    );
  }
  override attach(address: string): CXTicketVerifier {
    return super.attach(address) as CXTicketVerifier;
  }
  override connect(signer: Signer): CXTicketVerifier__factory {
    return super.connect(signer) as CXTicketVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CXTicketVerifierInterface {
    return new utils.Interface(_abi) as CXTicketVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CXTicketVerifier {
    return new Contract(address, _abi, signerOrProvider) as CXTicketVerifier;
  }
}
